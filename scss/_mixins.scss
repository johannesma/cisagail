@mixin transition($trans: all 240ms cubic-bezier(.2,.02,.02,.97)) {
		-moz-transition: $trans;
		-ms-transition: $trans;
		-o-transition: $trans;
		-webkit-transition: $trans;
		transition: $trans;
}
@mixin box-sizing($style) {
		-moz-box-sizing: $style;
		-webkit-box-sizing: $style;
	box-sizing: $style;	
}

$prefixes: "-webkit-", "-moz-", "-ms-", "-o-", "";

@mixin box-shadow($shadow...) {
  @each $prefix in $prefixes {
    #{$prefix}box-shadow: $shadow;
  }
}
/* border arrow */

@mixin arrow($direction, $color, $size){
    display: block;
    height: 0;
    width: 0;

    @if $direction == 'top' {
        border-left: $size solid transparent;
      border-right: $size solid transparent;
      border-bottom: $size solid $color;
    }

    @else if $direction == 'right' {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
      border-left: $size solid $color;
    }

    @else if $direction == 'bottom' {
        border-top: $size solid $color;
        border-right: $size solid transparent;
        border-left: $size solid transparent;
    }

    @else if $direction == 'left' {
        border-top: $size solid transparent;
      border-right: $size solid $color;
      border-bottom: $size solid transparent;
    }

    @else if $direction == 'top-left' {
        border-top: $size solid $color;
        border-right: $size solid transparent;
    }

    @else if $direction == 'top-right' {
        border-top: $size solid $color;
        border-left: $size solid transparent;
    }

    @else if $direction == 'bottom-left' {
        border-bottom: $size solid $color;
        border-right: $size solid transparent;
    }

    @else if $direction == 'bottom-right' {
        border-bottom: $size solid $color;
        border-left: $size solid transparent;
    }

}
@mixin border-radius($radius: .5em) {
		-webkit-border-radius: $radius;
		-moz-border-radius: $radius;
		border-radius: $radius;
}
@mixin columns($count: 2, $width: 10em, $gap: 1em) {
		-webkit-column-count: $count;
		-moz-column-count: $count;
	column-count: $count;
		-webkit-column-gap: $gap;
		-moz-column-gap: $gap;
	column-gap: $gap;
		-webkit-column-width: $width;
		-moz-column-width: $width;
	column-width: $width;
}

@mixin prefix($property, $value){
    -webkit-#{$property}: #{$value};
    -moz-#{$property}:  #{$value};
    -ms-#{$property}:  #{$value};
	-o-#{$property}:  #{$value};
    #{$property}: #{$value};
}

@mixin clearfix { 
	*zoom: 1;
	&:before { content: ""; display: table; }
	&:after { content: ""; display: table; clear: both; }
}

@mixin background-image-hires($image, $size: 100% 100%, $filetype: png) {
    background-image: url('../#{$image}.#{$filetype}');
    background-size: $size;

    @media only screen and (-webkit-min-device-pixel-ratio: 2)
    {
        background-image: url('../#{$image}@2x.#{$filetype}');
    }
}
